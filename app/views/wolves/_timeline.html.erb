  

    <div class="timeline-container ">

      <div class="timeline-buttons">
        <div class="expand-collapse-buttons">
          <a class="expand-all active" href="#"><span>EXPAND ALL</span></a>
          <a class="collapse-all" href="#"><span>COLLAPSE ALL</span></a>
        </div>
        <div class="sort-buttons">
          <a class="sort-newest active" href="#"><span>NEWEST FIRST</span></a>
          <a class="sort-oldest " href="#"><span>OLDEST FIRST</span></a>
        </div>
      </div>

      <div class="timeline-timeline">


        <% val = "" %>
        <% @wolf.smokes.each do |smoke| %>
          <% date = smoke.created_at.strftime("%d %b %y") %>
          <% if val != date %>
            <%= render 'smokes/datemarker', smoke: smoke %>
            <%= render 'smokes/smoke', smoke: smoke %>

            <% val = date %>
          <%else%>

            <%= render 'smokes/smoke', smoke: smoke %>

          <% end %>
        <% end %>
  
        <div class="line-container">
          <div class="line"></div>
        </div>


      </div>
    </div>



 <script>

  $(function() {

      $('.timeline-timeline').isotope({
        itemSelector : '.item',
        transformsEnabled: true,
        layoutMode: 'spineAlign',
        spineAlign:{
          gutterWidth: 56
        },
        getSortData: {
          timestamp: function($elem){
            return parseFloat($elem.find('.timestamp').text());
          }
        },
        sortBy: 'timestamp',
        sortAscending: true,
        itemPositionDataEnabled: true
      });


      // add open/close buttons to each post
      $('.timeline-timeline .item.post').each(function(){
        $(this).find('.inner').append('<a href="#" class="open-close"></a>');
      });

      $('.timeline-timeline .item a.open-close').click(function(e){
        $(this).siblings('.body').slideToggle(function(){
          $('.timeline-timeline').isotope('reLayout');
        });
        $(this).parents('.post').toggleClass('closed');
        $('.expand-collapse-buttons a').removeClass('active');
        e.preventDefault();
      });

      $('.timeline-timeline .post .share').hover(
        function(){
          $(this).find('.share-trigger').addClass('over');
          $(this).find('.share-popup').show();
        },
        function(){
          $(this).find('.share-trigger').removeClass('over');
          $(this).find('.share-popup').hide();
        }
      );

      $('.timeline-buttons a.expand-all').click(function(e){
        $('.post .body').slideDown(function(){
          $('.timeline-timeline').isotope('reLayout');
        });
        $('.post').removeClass('closed');
        $('.expand-collapse-buttons a').removeClass('active');
        $(this).addClass('active');
        e.preventDefault();
      });

      $('.timeline-buttons a.collapse-all').click(function(e){
        $('.post .body').slideUp(function(){
          $('.timeline-timeline').isotope('reLayout');
        });
        $('.post').addClass('closed');
        $('.expand-collapse-buttons a').removeClass('active');
        $(this).addClass('active');
        e.preventDefault();
      });



      $('.sort-buttons a').click(function(e){

          var $this = $(this);
          // don't proceed if already selected
          if ($this.hasClass('active')) {
            return false;
          }

          $('.sort-buttons a').removeClass('active');
          $this.addClass('active');
          if ($this.hasClass('sort-newest')){
            $('.timeline-timeline').isotope('reloadItems').isotope({sortAscending: true});
          }
          else{
            $('.timeline-timeline').isotope('reloadItems').isotope({sortAscending: false});
          }
          e.preventDefault();

      });




      /*
       * Keep the actual line from extending beyond the last item's date tab
       */
      function adjustLine(){
        var $lastItem = $('.item.last');
        var itemPosition = $lastItem.data('isotope-item-position');
        var dateHeight = $lastItem.find('.date').height();
        var dateOffset = $lastItem.find('.date').position();
        var innerMargin = parseInt($lastItem.find('.inner').css('marginTop'));
        var lineHeight = itemPosition.y + innerMargin + dateOffset.top + (dateHeight / 2);
        $('.line').height(lineHeight);
      }

      $('.timeline-container').resize(function(){ // uses "jQuery resize event" plugin
        adjustLine();
      });

  });









    /*
     * Isotope custom layout mode spineAlign
     */

    $.Isotope.prototype._spineAlignReset = function() {
      this.spineAlign = {
        colA: 0,
        colB: 0,
        lastY: -60
      };
    };
    $.Isotope.prototype._spineAlignLayout = function( $elems ) {
      var instance = this,
        props = this.spineAlign,
        gutterWidth = Math.round( this.options.spineAlign && this.options.spineAlign.gutterWidth ) || 0,
        centerX = Math.round(this.element.width() / 2);

      $elems.each(function(i, val){
        var $this = $(this);
        $this.removeClass('last').removeClass('top');
        if (i == $elems.length - 1)
          $this.addClass('last');
        var x, y;
        if ($this.hasClass('date-marker')){
          var width = $this.width();
          x = centerX - (width / 2);
          if (props.colA >= props.colB){
            y = props.colA;
            if (y == 0) $this.addClass('top');
            props.colA += $this.outerHeight(true);
            props.colB = props.colA;
          }
          else{
            y = props.colB;
            if (y == 0) $this.addClass('top');
            props.colB += $this.outerHeight(true);
            props.colA = props.colB;
          }
        }
        else{
          $this.removeClass('left').removeClass('right');
          var isColA = props.colB >= props.colA;
          if (isColA)
            $this.addClass('left');
          else
            $this.addClass('right');
          x = isColA ?
            centerX - ( $this.outerWidth(true) + gutterWidth / 2 ) : // left side
            centerX + (gutterWidth / 2); // right side
          y = isColA ? props.colA : props.colB;
          if (y - props.lastY <= 60){
            var extraSpacing = 60 - Math.abs(y - props.lastY);
            $this.find('.inner').css('marginTop', extraSpacing);
            props.lastY = y + extraSpacing;
          }
          else{
            $this.find('.inner').css('marginTop', 0);
            props.lastY = y;
          }
          props[( isColA ? 'colA' : 'colB' )] += $this.outerHeight(true);
        }
        instance._pushPosition( $this, x, y );
      });
    };
    $.Isotope.prototype._spineAlignGetContainerSize = function() {
      var size = {};
      size.height = this.spineAlign[( this.spineAlign.colB > this.spineAlign.colA ? 'colB' : 'colA' )];
      return size;
    };
    $.Isotope.prototype._spineAlignResizeChanged = function() {
      return true;
    };



  </script>


